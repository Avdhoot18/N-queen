
import java.util.ArrayList;
import java.util.List;

public class NQueensPaperStyle {

    public static void main(String[] args) {
        int N = 4;
        solveNQueens(N);
    }

    static void solveNQueens(int N) {
        List<Integer> board = new ArrayList<>();  // stack-like structure
        board.add(0);  // Start by placing the first queen at (0,0)
        int totalSolutions = 0;
        boolean finished = false;

        while (!finished) {
            if (!isSafe(board, N)) {
                int row = board.get(board.size() - 1);

                if (row >= N) {
                    // Backtrack
                    do {
                        if (board.size() > 1) {
                            board.remove(board.size() - 1);  // remove last
                            row = board.get(board.size() - 1);
                            board.remove(board.size() - 1);  // remove again to try next row
                            board.add(row + 1);  // try next row in previous column
                        } else {
                            // All possibilities checked
                            finished = true;
                            break;
                        }
                    } while (board.get(board.size() - 1) >= N);
                } else {
                    board.remove(board.size() - 1);
                    board.add(row + 1);
                }

            } else {
                if (board.size() == N) {
                    totalSolutions++;
                    printBoard(board, N);
                    int row = board.get(board.size() - 1);
                    board.remove(board.size() - 1);
                    board.add(row + 1);  // try next row in the last column
                } else {
                    board.add(0);  // move to next column, start with row 0
                }
            }
        }

        System.out.println("Total number of solutions: " + totalSolutions);
    }

    static boolean isSafe(List<Integer> board, int N) {
        int currentRow = board.get(board.size() - 1);
        int currentCol = board.size() - 1;

        if (currentRow >= N) return false;

        for (int col = 0; col < currentCol; col++) {
            int row = board.get(col);
            if (row == currentRow || Math.abs(row - currentRow) == Math.abs(col - currentCol)) {
                return false;
            }
        }
        return true;
    }

    static void printBoard(List<Integer> board, int N) {
        for (int row : board) {
            for (int col = 0; col < N; col++) {
                System.out.print(col == row ? "Q " : ". ");
            }
            System.out.println();
        }
        System.out.println("-".repeat(N * 2));
    }
}
